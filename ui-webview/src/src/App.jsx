import { useEffect, useState, useMemo } from 'react'
import './App.css'
import Individual from "./Individual.jsx";

function App() {
    const [count, setCount] = useState(0)
    const [appVersion, setAppVersion] = useState('');
    const [individuals, setIndividuals] = useState([]);
    const [searchTerm, setSearchTerm] = useState('');

    useEffect(() => {
        // Wait for WebView2 API to be available
        const initializeApi = async () => {
            if (window.chrome && window.chrome.webview && window.chrome.webview.hostObjects) {
                try {
                    const version = await window.chrome.webview.hostObjects.appApi.GetAppVersion();
                    setAppVersion(version);
                    
                    // Also load individuals when the component loads
                    const allIndividuals = await window.chrome.webview.hostObjects.appApi.GetAllExposedIndividuals();
                    const individualsArray = JSON.parse(allIndividuals);
                    setIndividuals(individualsArray);

                } catch (error) {
                    console.error('API not ready yet:', error);
                }
            }
        };

        // Try to initialize immediately
        initializeApi();

        // Also listen for when the DOM is fully loaded
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializeApi);
        }

        return () => {
            document.removeEventListener('DOMContentLoaded', initializeApi);
        };
    }, []);

    // Remove the filteredIndividuals calculation and pass search logic to Individual components
    const removeDiacritics = (str) => {
        return str.normalize('NFD')
            .replace(/[\u0300-\u036f]/g, '') // Replaces diacritics
            .replace(/\u2024/g, '.') // Replaces the crappy "one dot leader" character with a proper period
            .replace(/[\uFF00-\uFFEF]/g, (char) => {
                    // Convert full-width characters to half-width
                    const code = char.charCodeAt(0);
                    if (code >= 0xFF01 && code <= 0xFF5E) {
                        // Full-width ASCII characters
                        return String.fromCharCode(code - 0xFEE0);
                    }
                    return char;
                });

    };

    // This is massively flawed
    const romajiToHiragana = {
        'a': '„ÅÇ', 'i': '„ÅÑ', 'u': '„ÅÜ', 'e': '„Åà', 'o': '„Åä',
        'ka': '„Åã', 'ki': '„Åç', 'ku': '„Åè', 'ke': '„Åë', 'ko': '„Åì',
        'ga': '„Åå', 'gi': '„Åé', 'gu': '„Åê', 'ge': '„Åí', 'go': '„Åî',
        'sa': '„Åï', 'shi': '„Åó', 'su': '„Åô', 'se': '„Åõ', 'so': '„Åù',
        'za': '„Åñ', 'ji': '„Åò', 'zu': '„Åö', 'ze': '„Åú', 'zo': '„Åû',
        'ta': '„Åü', 'chi': '„Å°', 'tsu': '„Å§', 'te': '„Å¶', 'to': '„Å®',
        'da': '„Å†', 'di': '„Å¢', 'du': '„Å•', 'de': '„Åß', 'do': '„Å©',
        'na': '„Å™', 'ni': '„Å´', 'nu': '„Å¨', 'ne': '„Å≠', 'no': '„ÅÆ',
        'ha': '„ÅØ', 'hi': '„Å≤', 'fu': '„Åµ', 'he': '„Å∏', 'ho': '„Åª',
        'ba': '„Å∞', 'bi': '„Å≥', 'bu': '„Å∂', 'be': '„Åπ', 'bo': '„Åº',
        'pa': '„Å±', 'pi': '„Å¥', 'pu': '„Å∑', 'pe': '„Å∫', 'po': '„ÅΩ',
        'ma': '„Åæ', 'mi': '„Åø', 'mu': '„ÇÄ', 'me': '„ÇÅ', 'mo': '„ÇÇ',
        'ya': '„ÇÑ', 'yu': '„ÇÜ', 'yo': '„Çà',
        'ra': '„Çâ', 'ri': '„Çä', 'ru': '„Çã', 're': '„Çå', 'ro': '„Çç',
        'wa': '„Çè', 'wi': '„Çê', 'we': '„Çë', 'wo': '„Çí', 'n': '„Çì',
        'kya': '„Åç„ÇÉ', 'kyu': '„Åç„ÇÖ', 'kyo': '„Åç„Çá',
        'gya': '„Åé„ÇÉ', 'gyu': '„Åé„ÇÖ', 'gyo': '„Åé„Çá',
        'sha': '„Åó„ÇÉ', 'shu': '„Åó„ÇÖ', 'sho': '„Åó„Çá',
        'ja': '„Åò„ÇÉ', 'ju': '„Åò„ÇÖ', 'jo': '„Åò„Çá',
        'cha': '„Å°„ÇÉ', 'chu': '„Å°„ÇÖ', 'cho': '„Å°„Çá',
        'nya': '„Å´„ÇÉ', 'nyu': '„Å´„ÇÖ', 'nyo': '„Å´„Çá',
        'hya': '„Å≤„ÇÉ', 'hyu': '„Å≤„ÇÖ', 'hyo': '„Å≤„Çá',
        'bya': '„Å≥„ÇÉ', 'byu': '„Å≥„ÇÖ', 'byo': '„Å≥„Çá',
        'pya': '„Å¥„ÇÉ', 'pyu': '„Å¥„ÇÖ', 'pyo': '„Å¥„Çá',
        'mya': '„Åø„ÇÉ', 'myu': '„Åø„ÇÖ', 'myo': '„Åø„Çá',
        'rya': '„Çä„ÇÉ', 'ryu': '„Çä„ÇÖ', 'ryo': '„Çä„Çá'
    };

    const hiraganaToKatakana = (hiragana) => {
        return hiragana.replace(/[\u3041-\u3096]/g, (char) => {
            return String.fromCharCode(char.charCodeAt(0) + 0x60);
        });
    };

    const convertRomajiToKana = (romaji) => {
        let result = romaji.toLowerCase();
        const sortedKeys = Object.keys(romajiToHiragana).sort((a, b) => b.length - a.length);

        for (const key of sortedKeys) {
            result = result.replace(new RegExp(key, 'g'), romajiToHiragana[key]);
        }

        return result;
    };

    const generateKanaVariants = (term) => {
        const variants = [term];

        // Try to convert romaji to hiragana
        const hiragana = convertRomajiToKana(term);
        if (hiragana !== term) {
            variants.push(hiragana);

            // Convert hiragana to katakana
            const katakana = hiraganaToKatakana(hiragana);
            variants.push(katakana);
        }

        return variants;
    };

    const isIndividualVisible = (individual, searchTerm) => {
        if (!searchTerm) return true;

        const displayName = individual.displayName || '';
        const individualNote = individual.note?.text || '';

        const searchTerms = searchTerm.toLowerCase().split(' ').filter(term => term.trim() !== '');

        if (searchTerms.length === 0) return true;

        const individualMatch = searchTerms.every(term => {
            const kanaVariants = generateKanaVariants(term);

            return kanaVariants.some(variant => {
                const variantNormalized = removeDiacritics(variant);
                return removeDiacritics(displayName.toLowerCase()).includes(variantNormalized) ||
                    removeDiacritics(individualNote.toLowerCase()).includes(variantNormalized);
            });
        });

        if (individualMatch) return true;

        const accountNotesMatch = individual.accounts?.some(account => {
            const accountNote = account.note?.text || '';
            const accountDisplayName = account.inAppDisplayName || '';

            return searchTerms.every(term => {
                const kanaVariants = generateKanaVariants(term);

                return kanaVariants.some(variant => {
                    const variantNormalized = removeDiacritics(variant);
                    return removeDiacritics(accountNote.toLowerCase()).includes(variantNormalized) ||
                        removeDiacritics(accountDisplayName.toLowerCase()).includes(variantNormalized);
                });
            });
        }) || false;

        return accountNotesMatch;
    };



    const handleGetTime = async () => {
        if (window.chrome?.webview?.hostObjects?.appApi) {
            try {
                const time = await window.chrome.webview.hostObjects.appApi.GetCurrentTime();
                alert(`Current Time: ${time}`);
            } catch (error) {
                console.error('Error calling API:', error);
            }
        }
    };

    const handleGetAllExposedIndividuals = async () => {
        if (window.chrome?.webview?.hostObjects?.appApi) {
            try {
                const allIndividuals = await window.chrome.webview.hostObjects.appApi.GetAllExposedIndividuals();
                const individualsArray = JSON.parse(allIndividuals);
                setIndividuals(individualsArray);

            } catch (error) {
                console.error('Error calling API:', error);
            }
        }
    };

    const handleShowMessage = () => {
        if (window.chrome?.webview?.hostObjects?.appApi) {
            window.chrome.webview.hostObjects.appApi.ShowMessage('Hello from React!');
        }
    };

    const handleCloseApp = () => {
        if (window.chrome?.webview?.hostObjects?.appApi) {
            window.chrome.webview.hostObjects.appApi.CloseApp();
        }
    };

    // Calculate visible individuals count once using useMemo
    const visibleIndividualsCount = useMemo(() => {
        return individuals.filter(ind => isIndividualVisible(ind, searchTerm)).length;
    }, [individuals, searchTerm]);

    return (
        <>
            {individuals.length > 0 && (
                <div className="individuals-container">
                    <div className="header-section">
                        <h2 className="header-title">
                            üë• Users & Accounts ({visibleIndividualsCount})
                        </h2>

                        {searchTerm && (
                            <div className="search-results-info">
                                {visibleIndividualsCount === 0
                                    ? `No results found for "${searchTerm}"`
                                    : `Showing ${visibleIndividualsCount} of ${individuals.length} results`
                                }
                            </div>
                        )}
                    </div>

                    {/* Search field */}
                    <div className="search-container">
                        <input
                            type="text"
                            placeholder="Search by name or note..."
                            value={searchTerm}
                            onChange={(e) => setSearchTerm(e.target.value)}
                            className="search-input"
                        />
                        <span className="search-icon">
                            üîç
                        </span>
                        {searchTerm && (
                            <button
                                onClick={() => setSearchTerm('')}
                                className="search-clear-button"
                            >
                                ‚úï
                            </button>
                        )}
                    </div>

                    <div className="individuals-grid">
                        {individuals.map((individual, index) => (
                            <Individual
                                key={individual.id || index}
                                individual={individual}
                                index={index}
                                isVisible={isIndividualVisible(individual, searchTerm)}
                            />
                        ))}
                    </div>

                    {searchTerm && visibleIndividualsCount === 0 && (
                        <div className="no-results-message">
                            <div className="no-results-icon">üîç</div>
                            <div className="no-results-text">No individuals found matching "<strong>{searchTerm}</strong>"</div>
                            <div className="no-results-hint">
                                Try searching by name or note content
                            </div>
                        </div>
                    )}
                </div>
            )}
        </>
    )
}

export default App